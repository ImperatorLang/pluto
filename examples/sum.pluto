-- Adds numbers from command line
-- The argument is a Plutus Data value
let 
  fix = (\f -> (\x -> f (\v -> x x v)) (\x -> f (\v -> x x v)));
  compose = (\f g x -> f (g x));
  map = 
    fix 
      (\map f xs ->
        ! ! ChooseList 
          xs 
          (\_ -> NullList) -- TODO: This doesn't work
          (\_ -> 
            ! MkCons 
              (f (! HeadList xs))
              (map f (! TailList xs)))
          ()
      );
  -- FIXME: Avoid passing 'f', via implementing `map` above.
  sumList = (\f ->
    fix 
      (\sumList xs ->
        ! ! ChooseList 
          xs 
          (\_ -> 0) 
          (\_ -> (f (! HeadList xs)) +i (sumList (! TailList xs))) 
          ()
        ) 
  );
  sumIntList = sumList UnIData `compose` UnListData
in 
  (\nums -> 
    sumIntList nums
  )
