-- This is a toy example: the field of rational numbers (most likely broken).
let
  fix = (\f -> (\x -> f (x x)) (\x -> f (x x)));
  apply = (\a b -> b a);

  -- scott encoding
  tuple = (\a b -> (\c -> c a b));
  fst = apply (\a b -> a);
  snd = apply (\a b -> b);

  over = tuple;
  num = fst;
  denom = snd;
  i_signum = (\a -> if a <i 0 then -1 else if 0 <i a then 1 else 0);
  i_neg = (\i -> -1 *i i);
  i_abs = (\x -> if x <i 0 then i_neg x else x);
  normSigns = (\x -> let a = num x; b = denom x in (a *i i_signum b) `over` (i_abs b));
  i_min = (\a b -> if a <i b then a else b);
  i_max = (\a b -> if a <i b then b else a);
  gcd = (\f -> f f) (\gcd a b -> let c = minInteger a b; d = maxInteger a b
                          in (if d ==i 0 then c else gcd gcd c (d %i c)));
  norm = (\x0 -> let x1 = normSigns x0; a = num x1; b = denom x1; g = gcd a b
                 in (a /i g) `over` (b /i g));
  plus = ( \x y ->
           ( let a = num x;
                 b = denom x;
                 c = num y;
                 d = denom y
             in norm (((a *i d) +i (b *i c)) `over` (b *i d))
           )
         );
  times = ( \x y ->
            ( let a = num x;
                  b = denom x;
                  c = num y;
                  d = denom y
              in norm ((a *i c) `over` (b *i d))
            )
          );
  zero = 0 `over` 1;
  one = 1 `over` 1;
  negate = (\x -> (num x *i -1) `over` denom x);
  reciprocal = (\x -> let a = num x; b = denom x in (b *i i_signum a) `over` i_abs a)
in
  plus `tuple` ( times `tuple` ( negate `tuple` ( reciprocal `tuple` ( one `tuple` ( zero `tuple` NullList ) ) ) ) )
